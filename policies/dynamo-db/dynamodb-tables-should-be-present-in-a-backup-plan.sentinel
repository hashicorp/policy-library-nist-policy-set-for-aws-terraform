# DynamoDB.4
# This control evaluates whether an Amazon DynamoDB table in ACTIVE state is covered by a backup plan

# Imports
import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":              "dynamodb-tables-should-be-present-in-a-backup-plan",
	"message":                  "DynamoDB tables should be included in an AWS Backup plan for data protection.",
	"resource_dynamodb_table":  "aws_dynamodb_table",
	"resource_backup_plan":     "aws_backup_plan",
	"resource_backup_selection": "aws_backup_selection",
}

# Variables
dynamodb_tables = tf.config(tfconfig.resources).type(const.resource_dynamodb_table).resources
backup_plans = tf.config(tfconfig.resources).type(const.resource_backup_plan).resources
backup_selections = tf.config(tfconfig.resources).type(const.resource_backup_selection).resources

# Check if DynamoDB tables are included in backup plans
tables_in_backup_plans = []

# Check if any backup selection includes DynamoDB tables
for backup_selections as selection {
    selection_resources = maps.get(selection.config, "resources", [])
    references = maps.get(selection_resources, "references", [])
    if references is not empty {
        for references as reference {
            append(tables_in_backup_plans, reference)
        }
    }
}

# Find tables not covered by backup plans
violations = collection.filter(dynamodb_tables, func(table) {
    table_name = maps.get(table.config, "address", "")
    # Check if this table is included in any backup selection
    for tables_in_backup_plans as backup_table {

        if backup_table contains table_name {
            return false
        }
    }
    
    return true
})


# Generate report summary
summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs
print(report.generate_policy_report(summary))

# Rules
main = rule {
	violations is empty
}