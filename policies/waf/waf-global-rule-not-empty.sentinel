# This policy requires resources of type `aws_waf_rule` to have at least one predicate.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name":           "waf-global-rule-not-empty",
	"message":               "AWS WAF Classic global rules should have at least one condition. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/waf-controls.html#waf-6 for more details.",
	"resource_aws_waf_rule": "aws_waf_rule",
	"predicates":            "predicates",
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_waf_rule).resources
violations = collection.reject(resources, func(res) {
	predicates_values = maps.get(res.values, const.predicates, [])
	return length(predicates_values) > 0
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
