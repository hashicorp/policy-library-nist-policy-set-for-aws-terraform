# WAFv2 Web ACLs should have logging enabled

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"
import "types"

# Constants

const = {
	"policy_name":                                      "wafv2-webacl-should-have-logging-enabled",
	"message":                                          "WAFv2 Web ACLs should have logging enabled. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/waf-controls.html#waf-11 for more details.",
	"resource_aws_wafv2_web_acl":                       "aws_wafv2_web_acl",
	"resource_aws_wafv2_web_acl_logging_configuration": "aws_wafv2_web_acl_logging_configuration",
	"address":        "address",
	"module_address": "module_address",
	"module_prefix":  "module.",
}

# Functions

# Prefixes the referenced WAFv2 Web ACL's address with
# the module address. This is done because resource
# addresses comprise of module addresses
sanitize_referenced_wafv2_web_acl_address = func(res) {
	module_addr = res[const.module_address]
	if res.config.resource_arn.constant_value is defined {
		return ""
	}
	wafv2_web_acl_reference = res.config.resource_arn.references[1]
	# Check for root module
	if not strings.has_prefix(res[const.address], const.module_prefix) {
		return wafv2_web_acl_reference
	}

	return module_addr + "." + wafv2_web_acl_reference
}

# Variables

config_resources = tf.config(tfconfig.resources)
wafv2_web_acl_resources = config_resources.type(const.resource_aws_wafv2_web_acl).resources
wafv2_web_acl_logging_configuration_resources = config_resources.type(const.resource_aws_wafv2_web_acl_logging_configuration).resources

# Get WAFv2 Web ACL addresses that have policy violations
wafv2_web_acl_addresses_with_logging_configuration = map wafv2_web_acl_logging_configuration_resources as _, res {
	sanitize_referenced_wafv2_web_acl_address(res)
}

# Find violations: WAFv2 Web ACLs that have policy violations
violations = filter wafv2_web_acl_resources as _, res {
	res.address not in wafv2_web_acl_addresses_with_logging_configuration
}

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

print(report.generate_policy_report(summary))

main = rule {
	violations is empty
}
