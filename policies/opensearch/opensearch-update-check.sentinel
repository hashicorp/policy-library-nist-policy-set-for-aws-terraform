# This policy checks if resources of type 'aws_opensearch_domain' have the 'auto_software_update_enabled' attribute set to true
# in the 'software_update_options' block

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                    "opensearch-logs-to-cloudwatch",
	"message":                        "Attribute 'auto_software_update_enabled' in 'software_update_options' should be true for AWS OpenSearch Domain. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/opensearch-controls.html#opensearch-10 for more details.",
	"resource_aws_opensearch_domain": "aws_opensearch_domain",
	"auto_software_update_enabled":   "auto_software_update_enabled",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		software_update_options_values = maps.get(res, "values.software_update_options", null)
		if software_update_options_values is null or software_update_options_values is empty {
			return false
		}
		return maps.get(software_update_options_values[0], const.auto_software_update_enabled, false) is true
	})
}

# Variables

opensearch_domain_resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_opensearch_domain).resources
violations = get_violations(opensearch_domain_resources)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs
print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
