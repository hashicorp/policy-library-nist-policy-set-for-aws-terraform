# This policy checks whether an 'aws_api_gateway_stage' uses 'aws_wafv2_web_acl_association'.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"

# Constants
const = {
	"policy_name":                            "api-gateway-should-be-associated-with-a-waf-web-acl",
	"resource_aws_api_gateway_stage":         "aws_api_gateway_stage",
	"resource_aws_wafv2_web_acl_association": "aws_wafv2_web_acl_association",
	"message": "'aws_api_gateway_stage' should be associated with a 'aws_wafv2_web_acl_association'. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/apigateway-controls.html#apigateway-4 for more details.",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		resource_arn = maps.get(res, "config.resource_arn", {})
		if resource_arn is not defined {
			return false
		}
		references = maps.get(resource_arn, "references", [])
		for references as _, val {
			if strings.has_prefix(val, "aws_api_gateway_stage") {
				return true
			}
		}
		return false
	})
}

# Variables

aws_wafv2_web_acl_association = tf.config(tfconfig.resources).type(const.resource_aws_wafv2_web_acl_association).resources
violations = get_violations(aws_wafv2_web_acl_association)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
