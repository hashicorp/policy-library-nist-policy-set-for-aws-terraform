# This policy checks for resource type of 'aws_api_gateway_method_settings' whether all stages
# of an Amazon API Gateway REST or WebSocket API have logging enabled.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                              "api-gateway-rest-and-websocket-api-logging-enabled",
	"resource_aws_api_gateway_method_settings": "aws_api_gateway_method_settings",
	"message": "Logging should be enabled for resource 'aws_api_gateway_method_settings' at all stages of Amazon API Gateway REST or WebSocket API. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/apigateway-controls.html#apigateway-1 for more details.",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		api_gateway_settings = maps.get(res, "values.settings", {})
		for api_gateway_settings as settings {
			logging_level = maps.get(settings, "logging_level", "")
			if logging_level == "OFF" or logging_level == "" {
				return false
			}
		}
		return true
	})
}

# Variables

aws_api_gateway_method_settings = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_api_gateway_method_settings).resources
violations = get_violations(aws_api_gateway_method_settings)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
