# This policy checks 'aws_api_gateway_method_settings' in API Gateway REST API stages that have cache enabled are encrypted.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                              "api-gateway-rest-cache-have-encryption-enabled",
	"resource_aws_api_gateway_method_settings": "aws_api_gateway_method_settings",
	"caching_enabled":                          "caching_enabled",
	"cache_data_encrypted":                     "cache_data_encrypted",
	"message":                                  "API Gateway caching encryption can be enabled and configured to encrypt the cache data while at rest. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/apigateway-controls.html#apigateway-5 for more details.",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		settings = maps.get(res, "values.settings", [])
		cache_settings = maps.get(settings[0], const.caching_enabled, false)
		if cache_settings and maps.get(settings[0], const.cache_data_encrypted, false) is false {
			return false
		}
		return true
	})
}

# Variables

aws_api_gateway_method_settings = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_api_gateway_method_settings).resources
violations = get_violations(aws_api_gateway_method_settings)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
