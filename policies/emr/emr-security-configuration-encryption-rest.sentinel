# This policy requires 'aws_emr_security_configuration' to include at-rest encryption settings.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "json"

# Constants

const = {
	"policy_name": "emr-security-configuration-encryption-rest",
	"message":     "Amazon EMR security configurations must include encryption at rest. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/emr-controls.html#emr-3 for more details.",
	"resource_aws_emr_security_configuration": "aws_emr_security_configuration",
}

# Functions

# Validate that the JSON config includes encryption at rest
has_encryption_at_rest = func(res) {
	config_json = maps.get(res.values, "configuration", null)
	if config_json is null {
		return false
	}

	parsed = json.unmarshal(config_json)

	at_rest = maps.get(parsed, "EncryptionConfiguration.AtRestEncryptionConfiguration", null)
	return at_rest is not null and (maps.get(at_rest, "S3EncryptionConfiguration", null) is not null or
		maps.get(at_rest, "LocalDiskEncryptionConfiguration", null) is not null)
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_emr_security_configuration).resources

violations = collection.reject(resources, func(res) {
	return has_encryption_at_rest(res)
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Output

print(report.generate_policy_report(summary))

# Rule

main = rule {
	violations is empty
}
