# This policy requires aws_emr_security_configuration to enable encryption in transit.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "json"

# Constants

const = {
	"policy_name": "emr-security-configuration-encryption-transit",
	"message":     "Amazon EMR security configurations must enable encryption in transit. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/emr-controls.html#emr-4 for more details.",
	"resource_aws_emr_security_configuration": "aws_emr_security_configuration",
}

# Functions

# Validate that the JSON config includes encryption in transit
has_encryption_in_transit = func(res) {
	config_json = maps.get(res.values, "configuration", null)
	if config_json is null {
		return false
	}

	parsed = json.unmarshal(config_json)

	in_transit = maps.get(parsed, "EncryptionConfiguration.InTransitEncryptionConfiguration", null)

	return in_transit is not null and (maps.get(in_transit, "EnableInTransitEncryption", false) == true)
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_emr_security_configuration).resources

violations = collection.reject(resources, func(res) {
	return has_encryption_in_transit(res)
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Output

print(report.generate_policy_report(summary))

# Rule

main = rule {
	violations is empty
}
