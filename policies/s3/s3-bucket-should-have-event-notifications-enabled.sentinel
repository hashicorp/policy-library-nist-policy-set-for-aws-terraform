# S3 Buckets should have event notifications enabled

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"
import "types"

# Constants

const = {
	"policy_name":                         "s3-bucket-should-have-event-notifications-enabled",
	"message":                             "S3 Buckets should have event notifications enabled. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/s3-controls.html#s3-11 for more details.",
	"resource_aws_s3_bucket":              "aws_s3_bucket",
	"resource_aws_s3_bucket_notification": "aws_s3_bucket_notification",
	"address":        "address",
	"module_address": "module_address",
	"module_prefix":  "module.",
}

# Functions

# Prefixes the referenced S3 Bucket's address with
# the module address. This is done because resource
# addresses comprise of module addresses
sanitize_referenced_s3_bucket_address = func(res) {
	module_addr = res[const.module_address]
	if res.config.bucket.constant_value is defined or res.config.topic is not defined {
		return ""
	}
	s3_bucket_reference = res.config.bucket.references[1]
	# Check for root module
	if not strings.has_prefix(res[const.address], const.module_prefix) {
		return s3_bucket_reference
	}

	return module_addr + "." + s3_bucket_reference
}

# Variables

config_resources = tf.config(tfconfig.resources)
bucket_resources = config_resources.type(const.resource_aws_s3_bucket).resources
bucket_notification_resources = config_resources.type(const.resource_aws_s3_bucket_notification).resources

# Get S3 Bucket addresses that have policy violations
s3_bucket_addresses_with_event_notifications = map bucket_notification_resources as _, res {
	sanitize_referenced_s3_bucket_address(res)
}

# Find violations: S3 Buckets that have policy violations
violations = filter bucket_resources as _, res {
	res.address not in s3_bucket_addresses_with_event_notifications
}

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

print(report.generate_policy_report(summary))

main = rule {
	violations is empty
}
