# MQ.6
# This control checks whether an Application Load Balancer is associated with an AWS WAF Classic or AWS WAF web access control list (web ACL).

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name":            "aws-mq-6-rabbitmq-brokers-should-use-cluster-deployment-mode",
	"message":                "RabbitMQ brokers should use CLUSTER_MULTI_AZ deployment mode for high availability. Refer to AWS security best practices for more details.",
	"resource_aws_mq_broker": "aws_mq_broker",
	"engine_type":            "engine_type",
	"deployment_mode":        "deployment_mode",
	"rabbitmq":               "RabbitMQ",
	"rabbitmq_lower":         "rabbitmq",
	"cluster_multi_az":       "CLUSTER_MULTI_AZ",
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_mq_broker).resources

# Filter for RabbitMQ brokers that don't use CLUSTER_MULTI_AZ deployment mode
violations = collection.filter(resources, func(res) {
	engine = maps.get(res, "values." + const.engine_type, "")
	deployment = maps.get(res, "values." + const.deployment_mode, "")

	# Check if it's a RabbitMQ broker (case insensitive)
	is_rabbitmq = (engine == const.rabbitmq) or (engine == const.rabbitmq_lower)

	# Return true for violations: RabbitMQ brokers not using CLUSTER_MULTI_AZ
	return is_rabbitmq and deployment != const.cluster_multi_az
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
