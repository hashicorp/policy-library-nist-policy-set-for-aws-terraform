# This policy checks if resources of type 'aws_ec2_client_vpn_endpoint' have the cloudwatch logs
# enabled in the 'connection_log_options' attribute

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name": "ec2-client-vpn-connection-log-enabled",
	"message":     "AWS EC2 Client VPN endpoints should have client connection logging enabled. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-51 for more details.",
	"resource_aws_ec2_client_vpn_endpoint": "aws_ec2_client_vpn_endpoint",
	"enabled": "enabled",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		connection_log_options_values = maps.get(res, "values.connection_log_options")
		return maps.get(connection_log_options_values[0], const.enabled, false) is true
	})
}

# Variables

ec2_client_vpn_endpoints_resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_ec2_client_vpn_endpoint).resources
violations = get_violations(ec2_client_vpn_endpoints_resources)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs
print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
