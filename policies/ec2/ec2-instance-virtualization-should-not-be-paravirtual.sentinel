// This policy requires `aws_ami` resources to have attribute 'virtualization_type' to be 'hvm'.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

// Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"

// Constants

const = {
	"policy_name":           "ec2-instance-virtualization-should-not-be-paravirtual",
	"message":               "Attribute 'virtualization_type' must be 'hvm' for 'aws_ami' linked with the 'aws_instance' resource. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-24 for more details.",
	"resource_aws_ami":      "aws_ami",
	"resource_aws_instance": "aws_instance",
	"virtualization_type":   "virtualization_type",
	"ami":            "ami",
	"paravirtual":    "paravirtual",
	"constant_value": "constant_value",
	"module_prefix":  "module.",
}

// Functions

get_virtualization_complaint = func(resources) {
	return collection.reject(resources, func(res) {
		virtualization_values = maps.get(res, "config." + const.virtualization_type, {})
		if virtualization_values is empty {
			return true
		}
		return maps.get(virtualization_values, const.constant_value, const.paravirtual) is const.paravirtual
	})
}

get_violations = func(ami_complaint, instance_resources) {
	return collection.reject(instance_resources, func(res) {
		if res.config.ami.constant_value is defined {
			return false
		}

		ami = get_referenced_resource_address(res, "config.ami")
		if ami is not defined or ami is empty {
			return false
		}
		if ami_complaint is empty {
			return false
		}
		return collection.reject(ami_complaint, func(res) {
			return ami is res.address
		}) is defined
	})
}

get_referenced_resource_address = func(res, attr) {
	references_list = maps.get(res, attr, [])
	if references_list.references is empty {
		return ""
	}
	referenced_address = references_list.references[1]
	if strings.has_prefix(res.address, const.module_prefix) {
		referenced_address = res.module_address + "." + referenced_address
	}
	return referenced_address
}

// Variables

config_resources = tf.config(tfconfig.resources)
ami_resources = config_resources.type(const.resource_aws_ami).resources
instance_resources = config_resources.type(const.resource_aws_instance).resources

ami_complaint = get_virtualization_complaint(ami_resources)
violations = get_violations(ami_complaint, instance_resources)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

// Outputs

print(report.generate_policy_report(summary))

// Rules

main = rule {
	violations is empty
}
