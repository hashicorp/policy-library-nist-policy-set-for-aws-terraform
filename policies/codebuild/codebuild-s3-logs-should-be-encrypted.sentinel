# This control checks if Amazon S3 logs for an 'aws_codebuild_project' are encrypted.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                    "codebuild-s3-logs-should-be-encrypted",
	"resource_aws_codebuild_project": "aws_codebuild_project",
	"message":                        "Amazon S3 logs for an 'aws_codebuild_project' should be encrypted. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/codebuild-controls.html#codebuild-3 for more details.",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		logs_config = maps.get(res.values, "logs_config", [])
		if logs_config is empty or logs_config is null {
			return true
		}
		s3_logs = maps.get(logs_config[0], "s3_logs", [])
		if s3_logs is empty or s3_logs is null {
			return true
		}
		encryption_disabled = maps.get(s3_logs[0], "encryption_disabled", false)
		return !encryption_disabled
	})
}

# Variables

aws_codebuild_project = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_codebuild_project).resources
violations = get_violations(aws_codebuild_project)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
