# This control checks if DNS query logging is enabled for an Amazon Route 53 public hosted zone.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name":                    "route-53-public-hosted-zones-should-log-dns-queries",
	"message":                        "Route 53 public hosted zones should log DNS queries. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/route53-controls.html#route53-2 for more details.",
	"resource_aws_route53_query_log": "aws_route53_query_log",
}

# Variables

route53_query_log_resources = tf.config(tfconfig.resources).type(const.resource_aws_route53_query_log).resources

violations = collection.reject(route53_query_log_resources, func(res) {
	config = maps.get(res, "config", {})
	if config is {} or config is null {
		return false
	}
	cloudwatch_log_group_arn = maps.get(config, "cloudwatch_log_group_arn", {})
	constant_value = maps.get(cloudwatch_log_group_arn, "constant_value", "")
	references = maps.get(cloudwatch_log_group_arn, "references", [])
	if references is [] and (constant_value == "" or constant_value is null) {
		return false
	}
	if (constant_value != "" and constant_value is not null) {
		return true
	}
	if references is not [] {
		return true
	}
	return false
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
