# This policy requires resources of type `aws_elasticsearch_domain` to have at least three data nodes and zone awareness enabled.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name":                       "elasticsearch-domain-node-count-and-zone-awareness",
	"message":                           "Elasticsearch domains should have at least three data nodes and zone awareness enabled. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/es-controls.html#es-6 for more details.",
	"resource_aws_elasticsearch_domain": "aws_elasticsearch_domain",
	"cluster_config":                    "cluster_config",
	"instance_count":                    "instance_count",
	"zone_awareness_enabled":            "zone_awareness_enabled",
	"min_instance_count":                3,
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_elasticsearch_domain).resources
violations = collection.reject(resources, func(res) {
	cluster_config = maps.get(res, "values.cluster_config", null)
	if cluster_config is null {
		return false
	}
	instance_count = maps.get(cluster_config[0], "instance_count", 1)
	zone_awareness_enabled = maps.get(cluster_config[0], "zone_awareness_enabled", false)
	if zone_awareness_enabled is null {
		zone_awareness_enabled = false
	}
	return instance_count >= const.min_instance_count and zone_awareness_enabled
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
