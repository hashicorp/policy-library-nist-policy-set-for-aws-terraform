# This policy checks if resources of type 'aws_redshift_cluster' referenced to the
#resources of type 'aws_redshift_parameter_group' and having the 'require_ssl'
#set to 'true'

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"

# Constants
const = {
	"policy_name":                           "redshift-cluster-public-access-check",
	"message":                               "Parameter 'require_ssl' should be true for AWS Redshift Parameter Group. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/redshift-controls.html#redshift-2 for more details.",
	"resource_aws_redshift_cluster":         "aws_redshift_cluster",
	"resource_aws_redshift_parameter_group": "aws_redshift_parameter_group",
	"address":        "address",
	"module_prefix":  "module.",
	"module_address": "module_address",
}

# Functions

get_violations = func(redshift_cluster_resources, redshift_parameter_group_resources, config_resources) {
	return collection.reject(redshift_cluster_resources, func(res) {
		redshift_cluster_config_resources = config_resources.type(const.resource_aws_redshift_cluster).resources

		# Extract the address of resource aws_redshift_parameter_group which is refereced to the resource aws_redshift_cluster
		redshift_cluster_referenced_parameter_group_address = maps.get(redshift_cluster_config_resources[0], "config.cluster_parameter_group_name.references", "")
		if redshift_cluster_referenced_parameter_group_address is empty {
			return false
		}

		# Get the resources of the parameter group which is referenced to the aws_redshift_cluster
		redshift_cluster_referenced_parameter_group_resources = collection.find(redshift_parameter_group_resources, func(parameter_group_resource) {
			parameter_group_address_without_module = resource_address_without_module_address(parameter_group_resource)
			return parameter_group_address_without_module is redshift_cluster_referenced_parameter_group_address[-1]
		})

		# Check if the parameters in the aws_redshift-parameter_group contains the require_ssl attribute and is set to 'true' else will lead to a violation
		redshift_cluster_parameters = maps.get(redshift_cluster_referenced_parameter_group_resources, "values.parameter", [])
		return collection.find(redshift_cluster_parameters, func(redshift_cluster_parameter) {
			return maps.get(redshift_cluster_parameter, "name", "") is "require_ssl" and maps.get(redshift_cluster_parameter, "value", "") is "true"
		}) is defined
	})
}

# Removes module address prefix from a resource
# and returns back the localized address for a module.
resource_address_without_module_address = func(res) {
	resource_addr = res[const.address]
	# Check for root module
	if not strings.has_prefix(resource_addr, const.module_prefix) {
		return resource_addr
	}

	module_addr_prefix = res[const.module_address] + "."
	return strings.trim_prefix(resource_addr, module_addr_prefix)
}

# Variables

redshift_clusters = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_redshift_cluster).resources
redshift_parameter_groups = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_redshift_parameter_group).resources
config_resources = tf.config(tfconfig.resources)
violations = get_violations(redshift_clusters, redshift_parameter_groups, config_resources)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs
print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
