# This policy if an 'aws_lambda_function' that connects to a virtual private cloud (VPC) operates in at least the specified number of Availability Zone (AZs)

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                  "lambda-vpc-multi-az-check",
	"message":                      "AWS Lambda function that connects to a virtual private cloud (VPC) operates in at least the specified number of Availability Zone (AZs). Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/lambda-controls.html#lambda-5 for more details.",
	"resource_aws_lambda_function": "aws_lambda_function",
	"vpc_config":                   "vpc_config",
	"subnet_ids":                   "subnet_ids",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		vpc_config_values = maps.get(res.config, const.vpc_config, [])
		if vpc_config_values is empty {
			return false
		}
		subnet_ids = maps.get(vpc_config_values[0], const.subnet_ids, [])
		return length(subnet_ids.references) > 2
	})
}

# Variables

aws_lambda_function = tf.config(tfconfig.resources).type(const.resource_aws_lambda_function).resources
violations = get_violations(aws_lambda_function)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs
print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
