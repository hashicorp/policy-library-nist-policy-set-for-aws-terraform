# This policy checks if resources of type 'aws_dms_endpoint' have the 'auth_mechanism'
# not set to default in 'mongodb_settings' for engine of type 'mongodb'

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":               "dms-mongo-db-authentication-enabled",
	"message":                   "Attribute 'auth_mechanism' shouldn't be 'default' in 'mongodb_settings' for engine of type 'mongodb' in AWS DMS Endpoint. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/dms-controls.html#dms-11 for more details.",
	"resource_aws_dms_endpoint": "aws_dms_endpoint",
	"mongodb_engine":            "mongodb",
	"default_auth_mechanism":    "default",
	"auth_mechanism":            "auth_mechanism",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		engine_type = maps.get(res, "values.engine_name", "")
		if engine_type is not const.mongodb_engine {
			return true
		}
		mongo_settings = maps.get(res, "values.mongodb_settings", {})[0]
		auth_mechanism_attribute = maps.get(mongo_settings, const.auth_mechanism, "default")
		return auth_mechanism_attribute is not const.default_auth_mechanism
	})
}

# Variables

dms_endpoint_resource = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_dms_endpoint).resources
violations = get_violations(dms_endpoint_resource)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs
print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
