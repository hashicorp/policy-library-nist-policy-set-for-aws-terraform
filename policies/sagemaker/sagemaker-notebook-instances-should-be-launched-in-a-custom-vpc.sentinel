# This control checks if an Amazon SageMaker AI notebook instance is launched within a custom virtual private cloud (VPC).

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name": "sagemaker-notebook-instance-inside-vpc",
	"message":     "SageMaker notebook instances should be launched in a custom VPC. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/sagemaker-controls.html#sagemaker-2 for more details.",
	"resource_aws_sagemaker_notebook_instance": "aws_sagemaker_notebook_instance",
	"subnet_id":                                "subnet_id",
	"aws_subnet":                               "aws_subnet",
}

# Variables

sagemaker_notebook_instance = tf.config(tfconfig.resources).type(const.resource_aws_sagemaker_notebook_instance).resources

# Functions

verify_subnet_id = func(config) {
	# Check if the subnet_id is set in the configuration
	subnet_id = maps.get(config, const.subnet_id, null)
	if subnet_id == null or subnet_id == "" {
		return false
	}
	if subnet_id contains "constant_value" {
		# If subnet_id is a constant value and is null or empty, return false
		if subnet_id.constant_value != "" and subnet_id.constant_value != null {
			return true
		}
	}

	if "references" in subnet_id {
		references = maps.get(subnet_id, "references", [])
		if references is not [] {
			return true
		}
	}

	return false
}

violations = collection.reject(sagemaker_notebook_instance, func(res) {
	return verify_subnet_id(res.config)
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
