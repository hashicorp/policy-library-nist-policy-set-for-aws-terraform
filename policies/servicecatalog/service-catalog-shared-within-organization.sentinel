// This policy requires `aws_servicecatalog_portfolio_share` resources to have attribute 'type' should not be 'ACCOUNT'.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

// Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"

// Constants

const = {
	"policy_name": "service-catalog-shared-within-organization",
	"message":     "Attribute 'type' must not be 'ACCOUNT' for 'aws_servicecatalog_portfolio_share' linked with the 'aws_servicecatalog_portfolio' resource. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/servicecatalog-controls.html#servicecatalog-1 for more details.",
	"resource_aws_servicecatalog_portfolio_share": "aws_servicecatalog_portfolio_share",
	"resource_aws_servicecatalog_portfolio":       "aws_servicecatalog_portfolio",
	"type":            "type",
	"portfolio_share": "portfolio_share",
	"ACCOUNT":         "ACCOUNT",
	"constant_value":  "constant_value",
	"module_prefix":   "module.",
}

// Functions

get_portfolio_complaint = func(resources) {
	return collection.reject(resources, func(res) {
		portfolio_share_values = maps.get(res, "config." + const.type, {})
		if portfolio_share_values is empty {
			return false
		}
		return maps.get(portfolio_share_values, const.constant_value, const.ACCOUNT) is const.ACCOUNT
	})
}

get_referenced_resource_address = func(res, attr) {
	references_list = maps.get(res, attr, [])
	if references_list.references is empty {
		return ""
	}
	referenced_address = references_list.references[1]
	if strings.has_prefix(res.address, const.module_prefix) {
		referenced_address = res.module_address + "." + referenced_address
	}
	return referenced_address
}

// Variables

config_resources = tf.config(tfconfig.resources)
portfolio_share_resources = config_resources.type(const.resource_aws_servicecatalog_portfolio_share).resources
portfolio_resources = config_resources.type(const.resource_aws_servicecatalog_portfolio).resources

portfolio_share_complaint = get_portfolio_complaint(portfolio_share_resources)

portfolio_addresses = map portfolio_share_complaint as _, res {
	get_referenced_resource_address(res, "config.portfolio_id")
}

violations = filter portfolio_resources as _, res {
	res.address not in portfolio_addresses
}

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

// Outputs

print(report.generate_policy_report(summary))

// Rules

main = rule {
	violations is empty
}
