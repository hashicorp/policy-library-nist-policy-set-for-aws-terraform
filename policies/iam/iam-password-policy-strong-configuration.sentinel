# This policy requires that the `aws_iam_account_password_policy` resource
# have the strong configurations

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Params

param require_uppercase_characters_param default true

param require_lowercase_characters_param default true

param require_symbols_param default true

param require_numbers_param default true

param minimum_password_length_param default 8

param min_password_reuse_prevention_param default 12

param max_password_reuse_prevention_param default 24

param max_password_age_param default 90

# Constants
const = {
	"policy_name":                              "iam-password-policy-strong-configuration",
	"resource_aws_iam_account_password_policy": "aws_iam_account_password_policy",
	"message":                      "Resource 'aws_iam_account_password_policy' must have strong configuration. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/iam-controls.html#iam-7 for more details.",
	"require_uppercase_characters": "require_uppercase_characters",
	"require_lowercase_characters": "require_lowercase_characters",
	"require_symbols":              "require_symbols",
	"require_numbers":              "require_numbers",
	"minimum_password_length":      "minimum_password_length",
	"password_reuse_prevention":    "password_reuse_prevention",
	"max_password_age":             "max_password_age",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		return password_policy_strong_configuration_check(res, const.require_uppercase_characters, require_uppercase_characters_param) and
			password_policy_strong_configuration_check(res, const.require_lowercase_characters, require_lowercase_characters_param) and
			password_policy_strong_configuration_check(res, const.require_symbols, require_symbols_param) and
			password_policy_strong_configuration_check(res, const.require_numbers, require_numbers_param) and
			minimum_password_length_check(res, const.minimum_password_length, minimum_password_length_param) and
			password_reuse_prevention_check(res, const.password_reuse_prevention, min_password_reuse_prevention_param, max_password_reuse_prevention_param) and
			max_password_age_check(res, const.max_password_age, max_password_age_param)
	})
}

password_policy_strong_configuration_check = func(resource, config, params) {
	return maps.get(resource.values, config, true) is params
}

minimum_password_length_check = func(resource, config, params) {
	return maps.get(resource.values, config, 8) >= params
}

password_reuse_prevention_check = func(resource, config, min, max) {
	password_reuse_prevention_values = maps.get(resource.values, config, null)
	if password_reuse_prevention_values is null {
		return false
	}
	return password_reuse_prevention_values >= min and password_reuse_prevention_values <= max
}

max_password_age_check = func(resource, config, params) {
	max_password_age_values = maps.get(resource.values, config, null)
	if max_password_age_values is null {
		return false
	}
	return max_password_age_values <= params
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_iam_account_password_policy).resources
violations = get_violations(resources)

summary = {
	"policy_name": "iam-password-uppercase",
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}
print(report.generate_policy_report(summary))

main = rule {
	violations is empty
}
