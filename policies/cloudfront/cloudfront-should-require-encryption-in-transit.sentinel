# This control checks whether an 'aws_cloudfront_distribution' requires viewers to use HTTPS directly or whether it uses redirection.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                          "cloudfront-should-require-encryption-in-transit",
	"resource_aws_cloudfront_distribution": "aws_cloudfront_distribution",
	"message":                "'aws_cloudfront_distribution' requires viewers to use HTTPS directly or whether it uses redirection. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/cloudfront-controls.html#cloudfront-3 for more details.",
	"default_cache_behavior": "default_cache_behavior",
	"viewer_protocol_policy": "viewer_protocol_policy",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		default_cache_behavior_values = maps.get(res.values, const.default_cache_behavior, [])
		viewer_protocol_policy_values = maps.get(default_cache_behavior_values[0], const.viewer_protocol_policy, "")
		return viewer_protocol_policy_values is not "allow-all"
	})
}

# Variables

aws_cloudfront_distribution = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_cloudfront_distribution).resources
violations = get_violations(aws_cloudfront_distribution)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
