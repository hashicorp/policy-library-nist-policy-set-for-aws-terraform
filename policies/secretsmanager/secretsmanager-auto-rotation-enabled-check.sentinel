# This policy requires resources of type `aws_secretsmanager_secret` should be configured for automatic rotation.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"

# Constants

const = {
	"policy_name": "secretsmanager-auto-rotation-enabled-check",
	"message":     "Secrets Manager secrets should be configured for automatic rotation. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/secretsmanager-controls.html#secretsmanager-1 for more details.",
	"resource_aws_secretsmanager_secret":          "aws_secretsmanager_secret",
	"resource_aws_secretsmanager_secret_rotation": "aws_secretsmanager_secret_rotation",
	"kms_master_key_id":                           "kms_master_key_id",
	"sqs_managed_sse_enabled":                     "sqs_managed_sse_enabled",
	"module_prefix":                               "module.",
}

# Functions

get_referenced_resource_address = func(res, attr) {
	references_list = maps.get(res, attr, [])
	if references_list.references is empty or references_list.references is not defined {
		return ""
	}
	referenced_address = references_list.references[1]
	if strings.has_prefix(res.address, const.module_prefix) {
		referenced_address = res.module_address + "." + referenced_address
	}
	return referenced_address
}

# Variables

secret_resources = tf.config(tfconfig.resources).type(const.resource_aws_secretsmanager_secret).resources
secret_rotation_complaint_resources = tf.config(tfconfig.resources).type(const.resource_aws_secretsmanager_secret_rotation).resources

secret_addresses = map secret_rotation_complaint_resources as _, res {
	get_referenced_resource_address(res, "config.secret_id")
}

violations = filter secret_resources as _, res {
	res.address not in secret_addresses
}

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
