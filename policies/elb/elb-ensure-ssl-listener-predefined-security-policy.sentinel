# This policy checks if classic load balancers with SSL listeners
# have predefined security policy configured

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"

# Constants
const = {
	"policy_name":                                "elb-ensure-ssl-listener-predefined-security-policy",
	"resource_aws_elb":                           "aws_elb",
	"resource_aws_load_balancer_policy":          "aws_load_balancer_policy",
	"resource_aws_load_balancer_listener_policy": "aws_load_balancer_listener_policy",
	"predefined_policy_name":                     "ELBSecurityPolicy-TLS-1-2-2017-01",
	"module_prefix":                              "module.",
	"allowed_protocols":                          ["https", "ssl"],
	"message":                                    "Classic Load Balancers with SSL listeners should use a predefined security policy that has strong AWS Configuration. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/elb-controls.html#elb-8 for more details.",
}

# Functions

get_referenced_resource_address = func(res, attr) {
	references_list = maps.get(res, attr, [])
	if references_list is empty {
		return ""
	}

	referenced_address = references_list[1]
	if strings.has_prefix(res.address, const.module_prefix) {
		referenced_address = res.module_address + "." + referenced_address
	}

	return referenced_address
}

# Variables

config_resources = tf.config(tfconfig.resources)
plan_resources = tf.plan(tfplan.planned_values.resources)

// Check if there are load balancer policies that belong
// to the expected type
load_balancer_policies = plan_resources.type(const.resource_aws_load_balancer_policy).resources

load_balancer_policy_resources_with_expected_policy = collection.reject(load_balancer_policies, func(res) {
	return maps.get(res, "values.policy_type_name", "") is not const.predefined_policy_name
})

// Filter out the addresses
valid_policy_res_addresses = map load_balancer_policy_resources_with_expected_policy as policy_res { policy_res.address }

// Check if such policies are referenced by listeners
listener_policies = config_resources.type(const.resource_aws_load_balancer_listener_policy).resources

listener_policies_referencing_expected_policy = collection.reject(listener_policies, func(res) {
	referenced_policies = maps.get(res, "config.policy_names.references", [])
	if referenced_policies is empty {
		return true
	}

	return collection.find(referenced_policies, func(referenced_policy) {
		referenced_address = referenced_policy
		if strings.has_prefix(res.address, const.module_prefix) {
			referenced_address = res.module_address + "." + referenced_address
		}

		return referenced_address in valid_policy_res_addresses
	}) is not defined
})

// Get all the referenced load balancers for such listener policies
// referencing predefined security policy
referenced_load_balancers = []
for listener_policies_referencing_expected_policy as _, res {
	referenced_lb_addr = get_referenced_resource_address(res, "config.load_balancer_name.references")
	if referenced_lb_addr is empty {
		continue
	}

	append(referenced_load_balancers, referenced_lb_addr)
}

// Now that we have load balancers associated with the predefined policy
// check if load balancers with SSL/HTTPS listeners belong to that list.
classic_load_balancers = plan_resources.type(const.resource_aws_elb).resources

classic_load_balancers_with_https_ssl_listeners = collection.reject(classic_load_balancers, func(res) {
	listeners_list = maps.get(res, "values.listener", [])
	if listeners_list is empty {
		return false
	}

	// Check if the load balancer has https/ssl listeners
	return collection.find(listeners_list, func(listener) {
		return listener.lb_protocol in const.allowed_protocols
	}) is not defined
})

// All classic_load_balancers_with_https_ssl_listeners should have a backing
// predefined security policy
invalid_load_balancers = collection.reject(classic_load_balancers_with_https_ssl_listeners, func(res) {
	return res.address in referenced_load_balancers
})

summary = {
	"policy_name": const.policy_name,
	"violations": map invalid_load_balancers as _, res {
		{
			"address":        res.address,
			"module_address": res.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	invalid_load_balancers is empty
}
