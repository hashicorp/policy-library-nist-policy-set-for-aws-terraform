# This policy requires 'aws_lb_listener' resources using HTTPS/TLS to use recommended SSL policies.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"

# Constants

const = {
	"policy_name":              "elb-predefined-security-policy-ssl-check",
	"message":                  "Load balancer listeners using HTTPS or TLS must use a recommended SSL policy. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/elb-controls.html#elb-17 for more details.",
	"resource_aws_lb_listener": "aws_lb_listener",
	"protocols":                ["HTTPS", "TLS"],
	"recommended_ssl_policies": [
		"ELBSecurityPolicy-TLS13-1-2-2021-06",
		"ELBSecurityPolicy-TLS13-1-2-FIPS-2023-04",
		"ELBSecurityPolicy-TLS13-1-3-2021-06",
		"ELBSecurityPolicy-TLS13-1-3-FIPS-2023-04",
		"ELBSecurityPolicy-TLS13-1-2-Res-2021-06",
		"ELBSecurityPolicy-TLS13-1-2-Res-FIPS-2023-04",
	],
}

# Functions

# Check if the listener is using HTTPS or TLS and if it uses a recommended SSL policy
is_compliant = func(res) {
	protocol = maps.get(res.values, "protocol", null)
	ssl_policy = maps.get(res.values, "ssl_policy", null)

	if protocol in const.protocols {
		return ssl_policy is not null and ssl_policy in const.recommended_ssl_policies
	}

	return true
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_lb_listener).resources

violations = collection.reject(resources, func(res) {
	return is_compliant(res)
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Output

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
