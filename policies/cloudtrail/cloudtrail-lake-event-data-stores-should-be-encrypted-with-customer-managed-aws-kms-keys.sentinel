# CloudTrail.10
# This control checks whether an AWS CloudTrail Lake event data store is encrypted at rest with a customer managed AWS KMS key.

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":   "cloudtrail-lake-event-data-stores-should-be-encrypted-with-customer-managed-aws-kms-keys",
	"message":       "CloudTrail Event Data Stores must be encrypted with a KMS key. Specify a valid KMS key ID in the 'kms_key_id' attribute.",
	"resource_type": "aws_cloudtrail_event_data_store",
}

# Variables
resources = tf.config(tfconfig.resources).type(const.resource_type).resources

violations = collection.filter(resources, func(res) {
	kms_key_id = maps.get(res.config, "kms_key_id", [])
	if kms_key_id is empty {
		return true
	}
	references = maps.get(kms_key_id, "references", {})
	return references is empty
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs
print(report.generate_policy_report(summary))

# Rules
main = rule {
	violations is empty
}
