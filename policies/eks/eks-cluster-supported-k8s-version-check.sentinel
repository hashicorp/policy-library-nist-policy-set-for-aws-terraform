# This policy checks if 'aws_eks_cluster' does not
# run on unsupported kubernetes versions

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"

# Constants
const = {
	"policy_name":              "eks-cluster-supported-k8s-version-check",
	"message":                  "aws_eks_cluster resources should be created with supported kubernetes versions. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/eks-controls.html#eks-2 for more details.",
	"resource_aws_eks_cluster": "aws_eks_cluster",
	"version":                  "version",
}

# Variables

eks_clusters = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_eks_cluster).resources

eks_clusters_with_outdated_k8s_version = collection.reject(eks_clusters, func(res) {
	version_string = maps.get(res["values"], const.version, "")
	if version_string is empty {
		return true
	}

	split_version_string = strings.split(version_string, ".")
	# We check if the version is greater than 1.26
	if split_version_string[0] is not "1" {
		return false
	}

	if split_version_string[1] < "26" {
		return false
	}

	return true
})

summary = {
	"policy_name": const.policy_name,
	"violations": map eks_clusters_with_outdated_k8s_version as _, res {
		{
			"address":        res.address,
			"module_address": res.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	eks_clusters_with_outdated_k8s_version is empty
}
