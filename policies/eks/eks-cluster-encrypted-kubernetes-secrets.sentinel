# This policy checks if 'aws_eks_cluster' uses KMS
# service to encrypted Kubernetes secrets

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":              "eks-cluster-encrypted-kubernetes-secrets",
	"message":                  "Invalid 'encryption_config' attribute present for 'aws_eks_cluster' resources. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/eks-controls.html#eks-3 for more details.",
	"resource_aws_eks_cluster": "aws_eks_cluster",
	"encryption_config":        "encryption_config",
	"provider":                 "provider",
	"resources":                "resources",
	"secrets":                  "secrets",
	"key_arn":                  "key_arn",
}

# Variables

eks_clusters = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_eks_cluster).resources

eks_cluster_with_non_encrypted_secrets = collection.reject(eks_clusters, func(res) {
	encryption_config = maps.get(res["values"], const.encryption_config, [])
	if encryption_config is empty {
		return false
	}

	# Retrieve provider configuration for encryption_config
	provider_config = maps.get(encryption_config[0], const.provider, [])
	if provider_config is empty {
		return false
	}

	key_arn = maps.get(provider_config[0], const.key_arn, "")
	if key_arn is empty {
		return false
	}

	resources = maps.get(encryption_config[0], const.resources, null)
	if resources is null {
		return false
	}

	return resources contains const.secrets
})

summary = {
	"policy_name": const.policy_name,
	"violations": map eks_cluster_with_non_encrypted_secrets as _, res {
		{
			"address":        res.address,
			"module_address": res.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	eks_cluster_with_non_encrypted_secrets is empty
}
