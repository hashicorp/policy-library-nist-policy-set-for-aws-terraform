# This policy checks if resources of type 'aws_ecs_service' with
# launch_type as 'FARGATE' points to the 'LATEST' platform version

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"

# Constants
const = {
	"policy_name":              "ecs-fargate-service-platform-compatibility",
	"message":                  "ECS fargate based services should always run on the latest Farget plaform version. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/ecs-controls.html#ecs-10 for more details",
	"resource_aws_ecs_service": "aws_ecs_service",
	"fargate":                  "FARGATE",
	"latest_platform_version":  "LATEST",
}

# Variables

aws_ecs_services = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_ecs_service).resources

invalid_ecs_services = collection.reject(aws_ecs_services, func(res) {
	launch_type = strings.to_upper(maps.get(res, "values.launch_type", ""))

	# Ignore services which have launch_type other than FARGATE
	if launch_type is not const.fargate {
		return true
	}

	platform_version = strings.to_upper(maps.get(res, "values.platform_version", ""))

	# We ignore empty platform_version since it defaults to LATEST
	if platform_version is empty {
		return true
	}

	return platform_version is const.latest_platform_version
})

summary = {
	"policy_name": const.policy_name,
	"violations": map invalid_ecs_services as _, res {
		{
			"address":        res.address,
			"module_address": res.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	invalid_ecs_services is empty
}
