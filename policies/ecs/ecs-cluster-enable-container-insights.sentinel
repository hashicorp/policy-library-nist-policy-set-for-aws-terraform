# This policy checks if the 'aws_ecs_cluster' has the setting named
# 'containerInsights' enabled

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":              "ecs-cluster-enable-container-insights",
	"message":                  "ECS clusters must have container insights enabled. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/ecs-controls.html#ecs-12 for more details.",
	"resource_aws_ecs_cluster": "aws_ecs_cluster",
	"container_insights":       "containerInsights",
	"enabled":                  "enabled",
}

# Variables

aws_ecs_clusters = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_ecs_cluster).resources

invalid_ecs_clusters = collection.reject(aws_ecs_clusters, func(res) {
	cluster_settings = maps.get(res, "values.setting", "")
	if cluster_settings is empty {
		return false
	}

	return collection.matches(cluster_settings, {"name": const.container_insights, "value": const.enabled}) is not empty
})

summary = {
	"policy_name": const.policy_name,
	"violations": map invalid_ecs_clusters as _, res {
		{
			"address":        res.address,
			"module_address": res.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	invalid_ecs_clusters is empty
}
