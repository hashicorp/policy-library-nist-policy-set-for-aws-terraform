# This policy checks if all container definitions of a given 'aws_ecs_task_definition'
# resource contains a non empty value for the logConfiguration.logDriver attribute.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "json"

# Constants
const = {
	"policy_name":                      "ecs-task-definition-log-configuration-present",
	"message":                          "Attribute logConfiguration.logDriver should be non empty in container definitions for the given task definition. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/ecs-controls.html#ecs-9 for more details.",
	"resource_aws_ecs_task_definition": "aws_ecs_task_definition",
}

# Functions

parse_container_definitions = func(task_definition) {
	container_definitions = maps.get(task_definition, "values.container_definitions", "")

	# We don't care about empty container definitions
	if container_definitions is empty {
		return []
	}

	return json.unmarshal(container_definitions)
}

# Variables

task_definitions = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_ecs_task_definition).resources

task_definitions_with_invalid_container_defs = collection.reject(task_definitions, func(res) {
	container_defs_json = parse_container_definitions(res)
	if container_defs_json is empty {
		return true
	}

	# Find atleast one container definition that has a non null loggingConfiguration.logDriver
	# attribute
	return collection.find(container_defs_json, func(container_def) {
		return maps.get(container_def, "logConfiguration.logDriver", null) is null
	}) is not defined
})

summary = {
	"policy_name": const.policy_name,
	"violations": map task_definitions_with_invalid_container_defs as _, res {
		{
			"address":        res.address,
			"module_address": res.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	task_definitions_with_invalid_container_defs is empty
}
