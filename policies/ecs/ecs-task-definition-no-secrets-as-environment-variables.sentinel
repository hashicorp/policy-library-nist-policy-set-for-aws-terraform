# This policy checks if the container definitions contain non allow listed
# secrets as environment variables

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "json"

# Constants
const = {
	"policy_name":                      "ecs-task-definition-no-secrets-as-environment-variables",
	"message":                          "Container definitions in ECS task definitions should not contain the following environment variables - AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, ECS_ENGINE_AUTH_DATA. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/ecs-controls.html#ecs-8 for more details.",
	"resource_aws_ecs_task_definition": "aws_ecs_task_definition",
	"environment":                      "environment",
	"unallowed_vars":                   ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "ECS_ENGINE_AUTH_DATA"],
}

# Functions

parse_container_definitions = func(task_definition) {
	container_definitions = maps.get(task_definition, "values.container_definitions", "")

	# We don't care about empty container definitions
	if container_definitions is empty {
		return []
	}

	return json.unmarshal(container_definitions)
}

# Variables

task_definitions = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_ecs_task_definition).resources

task_definitions_with_invalid_container_definitions = collection.reject(task_definitions, func(res) {
	container_defs_json = parse_container_definitions(res)
	if container_defs_json is empty {
		return true
	}

	# Check if the container definition's environment variables contains
	# unallowed variables
	return collection.reject(container_defs_json, func(container_definition) {
		environment_variables = maps.get(container_definition, const.environment, [])

		unallowed_env_var_present = false
		for const.unallowed_vars as _, unallowed_var {
			match = collection.matches(environment_variables, {"name": unallowed_var})
			if match is not empty {
				unallowed_env_var_present = true
				break
			}
		}
		return unallowed_env_var_present is false
	}) is empty
})

summary = {
	"policy_name": const.policy_name,
	"violations": map task_definitions_with_invalid_container_definitions as _, res {
		{
			"address":        res.address,
			"module_address": res.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	task_definitions_with_invalid_container_definitions is empty
}
