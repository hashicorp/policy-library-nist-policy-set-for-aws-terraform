# This policy checks whether a resource 'aws_networkfirewall_firewall' has been deployed across multiple availability zones.

# Copyright IBM Corp. 2025
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                           "network-firewall-should-be-deployed-across-multiple-azs",
	"resource_aws_networkfirewall_firewall": "aws_networkfirewall_firewall",
	"message":                   "Resource 'aws_networkfirewall_firewall' should be deployed across multiple availability zones. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/networkfirewall-controls.html#networkfirewall-1 for more details.",
	"availability_zone_mapping": "availability_zone_mapping",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		availability_zones = maps.get(res.values, const.availability_zone_mapping, [])
		if availability_zones is null or availability_zones is empty {
			return false
		}
		return length(availability_zones) >= 2
	})
}

# Variables

aws_networkfirewall_firewall = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_networkfirewall_firewall).resources
violations = get_violations(aws_networkfirewall_firewall)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
