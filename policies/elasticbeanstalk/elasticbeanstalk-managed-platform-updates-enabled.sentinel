# This policy requires that the elasticbeanstalk environment have platform updates enabled

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                                "elasticbeanstalk-managed-platform-updates-enabled",
	"resource_aws_elastic_beanstalk_environment": "aws_elastic_beanstalk_environment",
}

# Functions

exists_setting_with_value = func(settings, namespace, name, value) {
	return collection.find(settings, func(setting) {
		return setting.namespace is namespace and
			setting.name is name and
			setting.value is value
	}) is defined
}

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		settings = maps.get(res.values, "setting", [])
		return exists_setting_with_value(settings, "aws:elasticbeanstalk:managedactions", "ManagedActionsEnabled", "true") and
			(exists_setting_with_value(settings, "aws:elasticbeanstalk:managedactions:platformupdate", "UpdateLevel", "minor") or
				exists_setting_with_value(settings, "aws:elasticbeanstalk:managedactions:platformupdate", "UpdateLevel", "patch"))
	})
}

# Variables
resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_elastic_beanstalk_environment).resources
violations = get_violations(resources)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        "Elastic Beanstalk environment does not have platform updates enabled. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/elasticbeanstalk-controls.html#elasticbeanstalk-2 for more details.",
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

main = rule {
	violations is empty
}
