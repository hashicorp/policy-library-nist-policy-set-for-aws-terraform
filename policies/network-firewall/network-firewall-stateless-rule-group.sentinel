# This policy checks if a stateless rule group in 'aws_networkfirewall_rule_group' contains rules

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                             "network-firewall-stateless-rule-group",
	"resource_aws_networkfirewall_rule_group": "aws_networkfirewall_rule_group",
	"rules_source":                            "rules_source",
	"stateless_rules_and_custom_actions":      "stateless_rules_and_custom_actions",
	"message": "stateless rule group in 'aws_networkfirewall_rule_group' contains rules. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/networkfirewall-controls.html#networkfirewall-6 for more details.",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		rule_group = maps.get(res, "values.rule_group", [])
		if rule_group is empty {
			return false
		}
		rules_source = maps.get(rule_group[0], const.rules_source, [])
		stateless_rules = maps.get(rules_source[0], const.stateless_rules_and_custom_actions, [])
		return stateless_rules is not empty
	})
}

# Variables

aws_networkfirewall_rule_group = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_networkfirewall_rule_group).resources
violations = get_violations(aws_networkfirewall_rule_group)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
