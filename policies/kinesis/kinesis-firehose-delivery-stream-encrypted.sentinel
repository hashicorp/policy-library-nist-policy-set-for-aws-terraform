// This policy requires `aws_kinesis_firehose_delivery_stream` resources to have server-side encryption enabled.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

// Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

// Constants

const = {
	"policy_name": "firehose-server-side-encryption-enabled",
	"message":     "Attribute 'server_side_encryption' must have the enabled set to true for 'aws_kinesis_firehose_delivery_stream' resources. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/datafirehose-controls.html#datafirehose-1 for more details.",
	"resource_aws_kinesis_firehose_delivery_stream": "aws_kinesis_firehose_delivery_stream",
	"server_side_encryption":                        "server_side_encryption",
	"enabled":                                       "enabled",
}

// Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_kinesis_firehose_delivery_stream).resources

violations = collection.reject(resources, func(res) {
	encryption_block = maps.get(res, "values." + const.server_side_encryption, [])

	if encryption_block is empty {
		return false
	}

	return maps.get(encryption_block[0], const.enabled, false) is true
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

// Outputs

print(report.generate_policy_report(summary))

// Rules

main = rule {
	violations is empty
}
