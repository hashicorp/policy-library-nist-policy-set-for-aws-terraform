# EventBridge.4
# This control checks if event replication is enabled for an Amazon EventBridge global endpoint.

# Copyright IBM Corp. 2025
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name": "eventbridge-global-endpoints-should-have-event-replication-enabled",
	"message":     "EventBridge Global Endpoints should have event replication enabled. Set 'replication_config.state' to 'ENABLED'. https://docs.aws.amazon.com/securityhub/latest/userguide/eventbridge-controls.html#eventbridge-4",
	"resource_aws_cloudwatch_event_endpoint": "aws_cloudwatch_event_endpoint",
	"replication_config":                     "replication_config",
	"state":                                  "state",
	"enabled_value":                          "ENABLED",
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_cloudwatch_event_endpoint).resources

violations = collection.reject(resources, func(res) {
	replication_config = maps.get(res.values, const.replication_config, null)
	if replication_config is null {
		return false
	}

	if length(replication_config) == 0 {
		return false
	}

	state = maps.get(replication_config[0], const.state, null)
	return state is const.enabled_value
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
