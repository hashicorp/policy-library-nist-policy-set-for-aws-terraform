# This policy checks if resources of type 'aws_backup_framework' have the attribute
# 'control' value set to 'BACKUP_RECOVERY_POINT_ENCRYPTED'

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                     "backup-recovery-point-encrypted",
	"message":                         "AWS Backup Framework Recovery Point must be encrypted at rest. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/backup-controls.html#backup-1 for more details.",
	"resource_aws_backup_framework":   "aws_backup_framework",
	"BACKUP_RECOVERY_POINT_ENCRYPTED": "BACKUP_RECOVERY_POINT_ENCRYPTED",
	"name": "name",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		control_values = maps.get(res, "values.control", [])
		return collection.find(control_values, func(res) {
			return maps.get(res, const.name, "") is const.BACKUP_RECOVERY_POINT_ENCRYPTED
		}) is defined
	})
}

# Variables

backup_framework_resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_backup_framework).resources
violations = get_violations(backup_framework_resources)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs
print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
