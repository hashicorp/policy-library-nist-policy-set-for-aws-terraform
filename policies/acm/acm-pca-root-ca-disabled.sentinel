# This policy checks if AWS ACM Private CA has a root certificate authority (CA) that is enabled.
# The control fails if the root CA is enabled with type 'ROOT'.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name": "acm-private-ca-root-disabled",
	"message":     "Root CA must be disabled for 'aws_acmpca_certificate_authority' resources. Enablement of root CA should be avoided in production. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/pca-controls.html#pca-1 for more details.",
	"resource_acmpca_certificate_authority": "aws_acmpca_certificate_authority",
	"type":    "type",
	"enabled": "enabled",
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_acmpca_certificate_authority).resources

root_ca_violations = collection.reject(resources, func(res) {
	ca_type = maps.get(res, "values." + const.type, "SUBORDINATE")
	enabled_status = maps.get(res, "values." + const.enabled, true)
	return ca_type is not "ROOT" or enabled_status is not true
})

summary = {
	"policy_name": const.policy_name,
	"violations": map root_ca_violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	root_ca_violations is empty
}
