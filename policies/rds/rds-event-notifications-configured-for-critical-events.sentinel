# This policy checks if resources of type 'aws_event_subscription' have the event notifications
# configured

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "strings" as strings
import "types" as types
import "collection" as collection
import "collection/maps" as maps

# Params

param resource_type default "aws_rds_cluster"
param source_type default "db-cluster"

# Constants
const = {
	"policy_name":                        "rds-event-notifications-configured-for-critical-events",
	"message":                            "Event Notifications should be configured for the resource critical events, ",
	"db-cluster":                         "https://docs.aws.amazon.com/securityhub/latest/userguide/rds-controls.html#rds-19",
	"db-instance":                        "https://docs.aws.amazon.com/securityhub/latest/userguide/rds-controls.html#rds-20",
	"db-parameter-group":                 "https://docs.aws.amazon.com/securityhub/latest/userguide/rds-controls.html#rds-21",
	"db-security-group":                  "https://docs.aws.amazon.com/securityhub/latest/userguide/rds-controls.html#rds-22",
	"resource_aws_db_event_subscription": "aws_db_event_subscription",
	"address":        "address",
	"module_prefix":  "module.",
	"module_address": "module_address",
}

event_categories_list = {
	"db-cluster":         ["failure", "maintenance"],
	"db-instance":        ["failure", "configuration change", "maintenance"],
	"db-parameter-group": ["configuration change"],
	"db-security-group":  ["configuration change", "failure"],
}

# Functions

# Removes module address prefix from a resource
# and returns back the localized address for a module.
resource_address_without_module_address = func(res) {
	resource_addr = res[const.address]
	# Check for root module
	if not strings.has_prefix(resource_addr, const.module_prefix) {
		return resource_addr
	}

	module_addr_prefix = res[const.module_address] + "."
	return strings.trim_prefix(resource_addr, module_addr_prefix)
}

# This function checks if the event categories list is specified in the resource and returns the valid rds resource ids
# for the event subscription resources
# It returns "all" if the event subscription resources are empty

get_valid_rds_resource_ids = func(event_subscription_resources, config_resources) {
	valid_source_ids = []
	if event_subscription_resources is empty {
		return ["all"]
	}
	for event_subscription_resources as res {
		res_address = maps.get(res, "address", "")
		event_subscription_config_resource = config_resources.address(res_address).resources[0]
		source_ids = maps.get(event_subscription_config_resource, "config.source_ids", [])
		source_ids_reference = maps.get(source_ids, "references", [])
		if source_ids_reference is empty {
			source_ids_reference = ["all"]
		}
		if maps.get(res, "values.source_type", "") is not source_type {
			valid_source_ids += source_ids_reference
			continue
		}

		is_event_category_list_specified_in_resource = true
		resource_event_categories = maps.get(res, "values.event_categories", [])

		# Check if the event categories list specified in the resource contains the required event categories specified in the aws control
		for event_categories_list[source_type] as event_category {
			if event_category not in resource_event_categories {
				is_event_category_list_specified_in_resource = false
			}
		}

		# If the event categories specified matches the aws control, than the resource is valid
		if is_event_category_list_specified_in_resource is true {
			valid_source_ids += source_ids_reference
		}
	}
	return valid_source_ids
}

# Variables

config_resources = tf.config(tfconfig.resources)
resources = tf.plan(tfplan.planned_values.resources).type(resource_type).resources

event_subscription_resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_db_event_subscription).resources
valid_source_ids = get_valid_rds_resource_ids(event_subscription_resources, config_resources)

# For the specified resource type, checking if the associated event subscription exists with the valid
violations = []
violations += collection.reject(resources, func(res) {
	resource_address = maps.get(res, "address", "")
	if valid_source_ids contains "all" {
		return true
	}
	return valid_source_ids contains resource_address
})

message = const.message + "Refer to " + const[source_type] + " for more details."

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        message,
		}
	},
}

# Outputs
print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
