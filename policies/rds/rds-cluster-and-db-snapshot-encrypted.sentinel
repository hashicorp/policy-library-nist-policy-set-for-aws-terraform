# This policy requires resources of type `aws_db_instance` and `aws_rds_cluster` have attribute "storage_encrypted" set to true and has kms_key_id
# This will make sure snapshots are encrypted

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name":              "rds-cluster-and-db-snapshot-encrypted",
	"message":                  "Attribute 'storage_encrypted' must be set to true and kms_key_id must be set for 'aws_db_instance' and 'aws_rds_cluster' resources. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/rds-controls.html#rds-4 for more details.",
	"resource_aws_db_instance": "aws_db_instance",
	"resource_aws_rds_cluster": "aws_rds_cluster",
	"storage_encrypted":        "storage_encrypted",
	"kms_key_id":               "kms_key_id",
}

# Variables

resources = tf.config(tfconfig.resources)
db_instance_resources = resources.type(const.resource_aws_db_instance).resources
rds_cluster_resources = resources.type(const.resource_aws_rds_cluster).resources

db_instance_violations = collection.reject(db_instance_resources, func(res) {
	storage_encrypted_value = maps.get(res, "config.storage_encrypted.constant_value", false)
	kms_key_id_constant_value = maps.get(res, "config.kms_key_id.constant_value", "")
	kms_key_id_references = maps.get(res, "config.kms_key_id.references", [])
	return storage_encrypted_value is true and (kms_key_id_constant_value is not empty or kms_key_id_references is not empty)
})
db_cluster_resources_violations = collection.reject(rds_cluster_resources, func(res) {
	storage_encrypted_value = maps.get(res, "config.storage_encrypted.constant_value", false)
	kms_key_id_constant_value = maps.get(res, "config.kms_key_id.constant_value", "")
	kms_key_id_references = maps.get(res, "config.kms_key_id.references", [])
	return storage_encrypted_value is true and (kms_key_id_constant_value is not empty or kms_key_id_references is not empty)
})

violations = db_instance_violations + db_cluster_resources_violations

summary = {
	"policy_name": "rds-cluster-and-db-snapshot-encrypted",
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
