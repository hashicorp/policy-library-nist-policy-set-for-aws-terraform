# CloudWatch.17
# This control checks whether CloudWatch alarm actions are activated (ActionEnabled should be set to true).

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name": "cloudwatch-alarm-actions-should-be-enabled",
	"message":     "CloudWatch alarms should have actions enabled. Refer to AWS security best practices for more details. https://docs.aws.amazon.com/securityhub/latest/userguide/cloudwatch-controls.html#cloudwatch-17",
	"resource_aws_cloudwatch_metric_alarm":    "aws_cloudwatch_metric_alarm",
	"resource_aws_cloudwatch_composite_alarm": "aws_cloudwatch_composite_alarm",
	"actions_enabled":                         "actions_enabled",
}

# Variables

metric_alarm_resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_cloudwatch_metric_alarm).resources
composite_alarm_resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_cloudwatch_composite_alarm).resources

metric_alarm_violations = collection.reject(metric_alarm_resources, func(res) {
	return maps.get(res, "values.actions_enabled", true) is true
})

composite_alarm_violations = collection.reject(composite_alarm_resources, func(res) {
	return maps.get(res, "values.actions_enabled", true) is true
})

violations = metric_alarm_violations + composite_alarm_violations

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
