# This policy requires that the `auto_minor_version_upgrade` attribute of the `aws_elasticache_cluster` or `aws_elasticache_replication_group`
# resource is true.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                                "elasticache-redis-cluster-auto-minor-version-upgrade-enabled",
	"resource_aws_elasticache_cluster":           "aws_elasticache_cluster",
	"resource_aws_elasticache_replication_group": "aws_elasticache_replication_group",
}

# Functions
get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		key = "values.auto_minor_version_upgrade"
		if not maps.has(res, key) {
			return true
		}
		return maps.get(res, key) is "true"
	})
}

# Variables
planned_resources = tf.plan(tfplan.planned_values.resources)
elasticache_clusters = planned_resources.type(const.resource_aws_elasticache_cluster).resources
aws_elasticache_cluster_violations = get_violations(elasticache_clusters)

elasticache_replication_groups = planned_resources.type(const.resource_aws_elasticache_replication_group).resources
aws_elasticache_replication_group_violations = get_violations(elasticache_replication_groups)

violations = aws_elasticache_cluster_violations + aws_elasticache_replication_group_violations
summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        "Attribute 'auto_minor_version_upgrade' must be true for " + v.type + " resources.Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/elasticache-controls.html#elasticache-2 for more details.",
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

aws_elasticache_cluster_rule = rule {
	aws_elasticache_cluster_violations is empty
}

aws_elasticache_replication_group_rule = rule {
	aws_elasticache_replication_group_violations is empty
}

main = rule {
	aws_elasticache_cluster_rule and aws_elasticache_replication_group_rule
}
