# This policy checks if resources of type 'aws_autoscaling_group' have more than one value
# in either 'availability_zone' or 'vpc_zone_identifier'

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                    "autoscaling-group-should-cover-multiple-azs",
	"message":                        "Attribute 'availability_zone' or 'vpc_zone_identifier' should have atleast two values for AWS Autoscaling Group. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/autoscaling-controls.html#autoscaling-2 for more details.",
	"resource_aws_autoscaling_group": "aws_autoscaling_group",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		availability_zones_values = maps.get(res, "config.availability_zones", {})
		vpc_zone_identifier_values = maps.get(res, "config.vpc_zone_identifier", {})
		return length(maps.get(availability_zones_values, "constant_value", [])) > 1 or length(maps.get(vpc_zone_identifier_values, "references", [])) > 2
	})
}

# Variables

autoscaling_groups_config_resources = tf.config(tfconfig.resources).type(const.resource_aws_autoscaling_group).resources
violations = get_violations(autoscaling_groups_config_resources)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs
print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
